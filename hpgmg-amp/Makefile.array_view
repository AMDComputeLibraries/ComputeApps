# Makefile for array_view version of C++ AMP / Kalmar.
# Supports a mix of c and cpp files
#
# The array_view version is rather rudimentary, intended
# as a starting point for future work.
# Note also that the array_view version is not intended to execute on a machine
# with the HSA software stack.

OBJDIR = build/obj/finite-volume/source
BINDIR = build/bin
SRCDIR = finite-volume/source
# OPERATOR can be 7pt, or 27pt for old stuff
# of fv2 or fv4 for newer
# fv2 is a 7pt order 2 stencil.
OPERATOR=fv2

# Default is 8 for these values, but 64 works better with GPU
#BLOCKCOPY=-DBLOCKCOPY_TILE_K=64 -DBLOCKCOPY_TILE_J=64
BLOCKCOPY=-DBLOCKCOPY_TILE_K=64 -DBLOCKCOPY_TILE_J=64

# This is the only version currently supported
VERSION = -DUSE_AMP -DAMP_ARRAY_VIEW=3            for array_view 3D

# TILING = -DAMP_TILE_BLOCKS=1 -DAMP_TILE_K=2 -DAMP_TILE_J=2 -DAMP_TILE_I=16
# It does no harm to set, e.g., AMP_TILE_BLOCKS when it's not used.
# Note there's no point making AMP_TILE_K bigger than BLOCKCOPY_TILE_K
# or DAMP_TILE_J bigger than BLOCKCOPY_TILE_J.
# Remember that the product of tile sizes must be <= 1024.
#TILING = -DAMP_TILE_K=32 -DAMP_TILE_J=32
TILING = -DAMP_TILE_BLOCKS=1 -DAMP_TILE_K=2 -DAMP_TILE_J=4 -DAMP_TILE_I=32

# CONSTANT can be -DSTENCIL_CONSTANT_COEFFICIENT or blank
#CONSTANT = -DSTENCIL_CONSTANT_COEFFICIENT
CONSTANT =

# LOCAL sets the variables for which to make tile_static copies on the GPU (LDS)
# If VERSION is not AMP_TILE_STATIC, this is ignored.
#LOCAL = -DUSElxn -DUSElbk -DUSElbj -DUSElbi -DUSElval
# This is not yet implemented for the array_view version
LOCAL =

# SOLVER can be BICGSTAB, CG, CABICGSTAT, or CACG.
# So far only BICGSTAB has been tested
SOLVER = BICGSTAB

# SMOOTHER can be CHEBY or GSRB or JACOBI or L1JACOBI
# So far the array_view version supports only CHEBY
SMOOTHER = CHEBY

# GSRB_METHOD can be -DGSRB_FP
# or -DGSRB_STRIDE2 (currently not implemented for AMP)
# or -DGSRB_BRANCH
# or blank.
# No effect for SMOOTHER!=GSRB.
# Can add -DGSRB_OOP for out of place
GSRB_METHOD = -DGSRB_BRANCH

# FUSE can be -DSTENCIL_FUSE_BC, -DSTENCIL_FUSE_DINV, both, or blank
# Best single-processor performance is blank
#FUSE = -DSTENCIL_FUSE_BC -DSTENCIL_FUSE_DINV
FUSE =

# BC can be -DUSE_PERIODIC_BC or blank
# 13-point requires -DUSE_PERIODIC_BC, 27-point recommends it.
BC=

# PROBLEM can be -DUSE_HELMHOLTZ or blank (Poisson)
PROBLEM =

# VCYCLES can be V, or U.  V is suggested
VCYCLES = V

# FCYCLES can be -DUSE_FCYCLES=1 or blank (to use just U or V cycles)
FCYCLES = -DUSE_FCYCLES=1

CLAMP_HOME = /opt/kalmar
CLAMP_CONFIG = $(CLAMP_HOME)/bin/clamp-config

MPI_INCLUDE = /usr/include/mpich
MPI_LIB_DIR = /usr/lib/mpich/

INCLUDES = -I. -I$(MPI_INCLUDE) 

CC          = $(CLAMP_HOME)/bin/clang++

CC_CPPFLAGS += $(FCYCLES)
CC_CPPFLAGS += -DUSE_MPI=1
CC_CPPFLAGS += -DUSE_$(SMOOTHER)=1
CC_CPPFLAGS += -DAMP_$(VERSION)
CC_CPPFLAGS += -DUSE_$(SOLVER)=1
CC_CPPFLAGS += $(GSRB_METHOD)
CC_CPPFLAGS += $(TILING)
CC_CPPFLAGS += -DOPERATOR_$(OPERATOR)
CC_CPPFLAGS += $(BLOCKCOPY)
CC_CPPFLAGS += $(LOCAL)
CC_CPPFLAGS += $(CONSTANT)
CC_CPPFLAGS += $(shell $(CLAMP_CONFIG) --install --cxxflags)

#CC_FLAGS    = -Xclang -fhsa-ext -O3
CC_FLAGS    = -O3 -march=bdver2 -mavx -ffast-math

LD      = $(CLAMP_HOME)/bin/clang++

LDFLAGS = -g -L$(MPI_LIB_DIR) $(shell $(CLAMP_CONFIG) --install --ldflags)
LDLIBS  = -lmpi

EXEC = hpgmg-fv-av

OBJS = $(OBJDIR)/hpgmg-fv.o \
       $(OBJDIR)/level.o \
       $(OBJDIR)/mg.o \
       $(OBJDIR)/operators.$(OPERATOR).o \
       $(OBJDIR)/solvers.o \
       $(OBJDIR)/timers.o

$(BINDIR)/$(EXEC): bindir_exist objdir_exist $(OBJS)
	$(LD) $(LDFLAGS) -o $@ $(OBJS) $(LDLIBS)

$(OBJDIR)/hpgmg-fv.o: $(SRCDIR)/hpgmg-fv.c $(SRCDIR)/*.h Makefile.array_view
	$(CC) $(CC_CPPFLAGS) $(INCLUDES) $(CC_FLAGS) -c $< -o $@

$(OBJDIR)/level.o: $(SRCDIR)/level.c $(SRCDIR)/*.h
	$(CC) $(CC_CPPFLAGS) $(INCLUDES) $(CC_FLAGS) -c $< -o $@

$(OBJDIR)/mg.o: $(SRCDIR)/mg.c $(SRCDIR)/*.h
	$(CC) $(CC_CPPFLAGS) $(INCLUDES) $(CC_FLAGS) -c $< -o $@

$(OBJDIR)/operators.$(OPERATOR).o: $(SRCDIR)/operators.$(OPERATOR).c Makefile.array_view $(SRCDIR)/*.h $(SRCDIR)/operators/*.c
	$(CC) $(CC_CPPFLAGS) $(INCLUDES) $(CC_FLAGS) -c $< -o $@

$(OBJDIR)/solvers.o: $(SRCDIR)/solvers.c $(SRCDIR)/*.h $(SRCDIR)/solvers/*.c
	$(CC) $(CC_CPPFLAGS) $(INCLUDES) $(CC_FLAGS) -c $< -o $@

$(OBJDIR)/timers.o: $(SRCDIR)/timers.c $(SRCDIR)/timers.h $(SRCDIR)/timers/*.c
	$(CC) $(CC_CPPFLAGS) $(INCLUDES) $(CC_FLAGS) -c $< -o $@

.PHONY=clean objdir_exist bindir_exist
clean:
	rm $(OBJDIR)/*.o $(BINDIR)/hpgmg-fv-av

objdir_exist:
	mkdir -p $(OBJDIR)

bindir_exist:
	mkdir -p $(BINDIR)
